// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Privilegios {
  PADRAO
  ASSINANTE
  DEV
}

model Usuario {
  id          String        @id @default(uuid())
  email       String        @unique
  nome        String
  privilegio  Privilegios   @default(PADRAO)
  senha       String
  foto        String?
  logMusica   LogMusica[]
  musicaSalva MusicaSalva[]
}

model Artista {
  id      String    @id @default(uuid())
  nome    String
  streams Int       @default(0)
  foto    String?
  autoria Autoria[]
}

model Musica {
  id          String        @id @default(uuid())
  nome        String
  genero      String?
  album       String?
  autoria     Autoria[]
  logMusica   LogMusica[]
  musicaSalva MusicaSalva[]
}

model Autoria {
  artista   Artista @relation(fields: [artistaId], references: [id], onDelete: Cascade)
  artistaId String
  musica    Musica  @relation(fields: [musicaId], references: [id], onDelete: Cascade)
  musicaId  String

  @@id([artistaId, musicaId])
}

model LogMusica {
  id        String   @id @default(uuid())
  tempo     DateTime @default(now())
  usuario   Usuario?  @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  usuarioId String?
  musica    Musica?   @relation(fields: [musicaId], references: [id], onDelete: SetNull)
  musicaId  String?
}

model MusicaSalva {
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId String
  musica    Musica  @relation(fields: [musicaId], references: [id], onDelete: Cascade)
  musicaId  String

  @@id([usuarioId, musicaId])
}
